#!/bin/bash
# This script will extract the memory information from a run of the emulator
# that was launched with the -verbose flag.
#
# Usually you want to run this on output generated by running the cts tests.
# An example is to run this against the results of a run_local.sh invocation:
#
# ./graph-memory-use.sh -i
# external/adt-infra/emu_test/20170331-03335/CTSTestCase_20170331-033350.log \
#  -o memory_usage.png
#

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
default_in=logfile
default_out=memory_usage.png
option_in=$default_in
option_out=$default_out

if [ $# -eq 0 ]; then
  option_help=yes
fi

while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -h|--help|-\?)
      option_help=yes
      ;;
    -i)
      option_in=${2/#\~/$HOME}
      shift
      ;;
    -o)
      option_out=${2/#\~/$HOME}
      shift
      ;;
    *)
    echo "unknown option '$key', use --help"
    exit 1
    ;;
esac
shift # past argument or value
done


if [ "$option_help" = "yes" ] ; then
    echo "Usage: $0 [options]"
    echo
    echo "Options: [defaults in brackets after descriptions]"
    echo ""
    echo "Standard options:"
    echo "  --help                      Print this message"
    echo "  -i <input>                  Log file containing memory info [$default_in]"
    echo "  -o <output>                 Resulting png image [$default_out]"
    echo
    exit 1
fi

if [ ! -f $option_in ]; then 
  echo "file $option_in does not exist"
  exit 1
fi

plotfile=$(mktemp /tmp/plotXXXXXXXX.script)

trap "{  rm -f $plotfile; }" EXIT

# echo "Gnuplot file: $plotfile"
make_plot() {
echo "set title \"UTC emulator launch: \".strftime(\"%a %b %d %H:%M:%S %Y\", ${2})"  > $1
  cat << EOF >> $1
set term png giant size 1920, 1080
# Android style!
set style line 1 lc rgb '#009688' # dark teal
set style line 2 lc rgb '#FF4081' # accent pint
set palette maxcolors 2
set palette defined ( 0 '#009688', 1 '#FF4081') # line styles
set border 3 front ls 1
set tics nomirror out scale 0.75
set format '%g'
set ylabel "MAX VSZ"
set ytics nomirror
set yrange[0:*]
set grid
set format y '%.0s%cB' # Note, 1000 bytes = 1 KB
set timefmt "%s"
set xdata time
set format x "%H:%M"
plot '<cat' using 1:2 with lines ls 2 lw 2 axes x1y1 title "PEAK VSZ"
EOF
}

# lines always end in something like this MemoryReport: Epoch: 1491000479, Peak: 49874800640
# So we chop of the last columns to get the numbers..

# Get the first data point from the emulator, so we can use that in the title
first=$(awk '/Epoch: [0-9]+, Peak: [0-9]+$/{print $(NF-2)}' $option_in | sed 's/,$//' | head -1)

# Of course gnuplot doesn't use an epoch that starts in 1970, they start in 2000..
make_plot $plotfile $(expr $first - 946684800)

awk '/Epoch: [0-9]+, Peak: [0-9]+$/{print $(NF-2), $(NF)}' $option_in | gnuplot $plotfile  > $option_out
